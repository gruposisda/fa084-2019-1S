}
f = function(task, model)
model$$learner.model$tot.withinss
f = function(task, model)
model$learner.model$tot.withinss
makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
control = makeTuneControlRandom(maxit = 5)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = list(whinss))
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = list(withinss))
f = function(task, model)
model$learner.model$tot.withinss
makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = list(withinss))
f = function(task, model)
model$learner.model$tot.withinss
f
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
f = function(task, model, pred, extra.args)
model$learner.model$tot.withinss
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = list(withinss))
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
f = function(task, model, pred)
f = function(task, model, pred)
model$learner.model$tot.withinss
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
f = function(task, model, pred, m$extra.args)
model$learner.model$tot.withinss
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
f = function(task, model, pred, m$extra.args)
model$learner.model$tot.withinss
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
f = function(task, model, pred, m$extra.args)
model$learner.model$tot.withinss
f
f = function(task, model, pred, extra.args)
model$learner.model$tot.withinss
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss))
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
tr
performance(tr,measures = withinss)
f = function(task, model, pred, extra.args)
return(model$learner.model$tot.withinss)
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
withinss
withinss$properties
withinss$extra.args
f = function(task, model, pred, extra.args)
return(model$learner.model$tot.withinss)
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
tr = train(learner,task)
tr$learner.model$withinss
tr$learner.model$tot.withinss
tr$learner.model$tot.withinss
tr$learner.model$tot.withinss
tr$learner.model$tot.withinss
f = function(task, model, pred, extra.args){
return(model$learner.model$tot.withinss)
}
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
f = function(task, model, pred, tot.withinss){
return(model$learner.model$tot.withinss)
}
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
f = function(task, model, pred,feats, extra.args){
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
f = function(task, model, pred,feats, extra.args){
return(model$learner.model$tot.withinss)
}
withinss = makeMeasure(id = "withinss", minimize = TRUE, properties = c("cluster"), fun = f)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
control = makeTuneControlGrid(maxit = 5)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
control = makeTuneControlGrid(maxit = 100)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
cluster_params = makeParamSet(makeNumericParam("centers",2,20))
tr = train(learner,task)
tr$learner.model$tot.withinss
performance(tr,measures = withinss)
control = makeTuneControlGrid(maxit = 100)
performance(tr,measures = withinss)
control = makeTuneControlGrid(maxit = 100)
tst = tuneParams(learner,task,cv2,par.set = cluster_params,control = control,measures = withinss)
task$weights
head(df)
plotLearnerPrediction(lrn, task = mtcars.task, features = c("Murder", "Assault"), cv = 0)
plotLearnerPrediction(learn, task = task, features = c("Murder", "Assault"), cv = 0)
plotLearnerPrediction(learner, task = task, features = c("Murder", "Assault"), cv = 0)
tr
tr$subset
tr$learner.model
tr$learner.model$cluster
df = iris
dim(df)
df = scale(df) %>% as.data.frame()
task = makeClusterTask('cluster',df)
task
learner = makeLearner('cluster.kmeans', centers = 4)
learner
cluster_params = makeParamSet(makeNumericParam("centers",2,20))
tr = train(learner,task)
df = iris %>% select(-Species)
dim(df)
df = scale(df) %>% as.data.frame()
task = makeClusterTask('cluster',df)
task
learner = makeLearner('cluster.kmeans', centers = 4)
learner
cluster_params = makeParamSet(makeNumericParam("centers",2,20))
tr = train(learner,task)
tr$learner.model$tot.withinss
tr$learner.model$cluster
tr$learner.model$cluster %>% table()
learner = makeLearner('cluster.kmeans', centers = 3)
learner
cluster_params = makeParamSet(makeNumericParam("centers",2,20))
tr = train(learner,task)
tr$learner.model$tot.withinss
tr$learner.model$cluster
tr$learner.model$cluster %>% table
tr$learner.model
tr$learner.model$tot.withinss
tr = train(learner,task)
tr$learner.model$tot.withinss
#crie a variavel tr que recebe a saida de train() usando o learner e a task
tr = train(learner,task)
tr$learner.model$tot.withinss
tr$learner.model
#crie a variavel tr que recebe a saida de train() usando o learner e a task
tr = train(learner,task)
tr$learner.model$tot.withinss
tr$learner.model$cluster
#Crie um dataframe com o vetor anterior em uma coluna e os dados da coluna "Species" do conjunto iris
cl = tr$learner.model$cluster
data.frame(cl,iris$Species)
data.frame(cl,iris$Species) %>% table
#crie uma variavel "df" que contenha o conjunto de dados
df = iris %>% select(-Species)
df
#remova a coluna species de "df"
dim(df)
df = scale(df) %>% as.data.frame()
#crie uma task de cluster
#https://mlr.mlr-org.com/articles/tutorial/task.html#cluster-analysis
task = makeClusterTask('cluster',df)
#crie um learner de com cl = "cluster.kmeans" com hiperparÃ¢metro centers = 3
learner = makeLearner(cl = 'cluster.kmeans', centers = 3)
learner
#crie a variavel tr que recebe a saida de train() usando o learner e a task
set.seed(2019)
tr = train(learner,task)
#acesse o valor de "tot.withinss" dentro de "learner.model" dentro de "tr"
#qual o valor?
tr$learner.model$tot.withinss
#Quantas observacoes existem em cada cluster?
#Procure esta informacao dentro de "learner.model" em "tr"
tr$learner.model$cluster
data.frame(cl,iris$Species) %>% table
plot(iris$Petal.Length,iris$Petal.Width)
plot(iris$Petal.Length,iris$Petal.Width)
plot(iris$Petal.Length,iris$Petal.Width, col=iris$Species)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
library(tidyverse)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
nc
nc <- st_read(system.file("shape/nc.shp", package="sf"))
head(nc)
head(nc)
plot(nc)
usa
if (utils::packageVersion("ggplot2") > "2.2.1")
ggplot() + geom_sf(data = usa)
library(tidyverse)
usa
if (utils::packageVersion("ggplot2") > "2.2.1")
ggplot() + geom_sf(data = usa)
ggplot() + geom_sf(data = nc, aes(fill = BIR74)) + scale_y_continuous(breaks = 34:36)
ggplot() + geom_sf(data = nc, aes(fill = BIR74)) + scale_y_continuous(breaks = 34:36)
st_area(nc$geometry)
install.packages('lwgeom')
st_area(nc$geometry)
head(nc)
areas = st_area(nc$geometry)
head(areas)
st_distance(nc$geometry[1],nc$geometry[2])
st_distance(nc$geometry[1],nc$geometry[10])
ggplot() +
geom_sf(data = cdn) +
coord_sf(crs = st_crs(4326))
read_sf('~/data/*.shp')
read_sf('~/data/*/*.shp')
read_sf('~/data/statesp020.shp')
usa = read_sf('~/data/statesp020.shp')
ggplot() +
geom_sf(data = usa) +
coord_sf(crs = st_crs(4326))
ggplot() +
geom_sf(data = usa)
library(mapview)
install.packages("mapview")
install.packages('tmap')
install.packages('svglite')
ggplot() + geom_sf(data = nc, aes(fill = BIR74))
head(nc)
ggplot() + geom_sf(data = nc, aes(fill = NAME))
ggplot() + geom_sf(data = nc, aes(fill = NAME)) + guides(fill = FALSE)
head(nc)
ggplot() + geom_sf(data = nc, aes(fill = AREA))
head(areas)
ncg = st_geometry(nc)
plot(ncg, border = 'grey')
cntrd = st_centroid(ncg)
ncg2 = (ncg - cntrd) * rot(pi/2) * .75 + cntrd
plot(ncg2, add = TRUE)
ggplot() + geom_sf(data = sem$geometry,colour=NA,fill='green')  +
geom_sf(data = st_sfc(subset),colour=NA,fill='red')
library(tidyverse)
library(sf)
setwd('~/data/S.Martinho/')
sem = read_sf('./sem.shp')
sem$id = 1:nrow(sem)
head(sem)
sum(sem$areaSqM)
intersections_per_id = list()#vector("list",nrow(sem))
area_intersections_per_id = list()
t0 = Sys.time()
polygons = sem$geometry
for(id in sem$id){
intersections_for_id = list()
area_intersections_for_id = list()
for(i in id:length(polygons)){
#if(i%%200 == 0){print(paste('iteration ',i, 'for id :',id))}
if(i == id){next}
area = st_intersection(polygons[id],polygons[i])
inter_area = st_area(area)
if((length(inter_area)!=0)){
if(inter_area==0){next}
area_intersections_for_id[[as.character(i)]] = area
intersections_for_id[[as.character(i)]] = inter_area
}
}
area_intersections_per_id[[as.character(id)]] = area_intersections_for_id
intersections_per_id[[as.character(id)]] = intersections_for_id
}
t1 = Sys.time()
t1 -t0
lowerq = quantile(vec_areas)[2]
upperq = quantile(vec_areas)[4]
iqr = upperq - lowerq
lowerbound = quantile(vec_areas,probs = 0.39)
vec = vector()
for(i in 1:length(area_intersections_per_id)){
area_intersections_for_id = unname(area_intersections_per_id[[i]])
polygons=vector()
if(length(area_intersections_for_id) == 0){next}
for(j in 1:length(area_intersections_for_id)){
polygons[j] = area_intersections_for_id[[j]]
}
vec=c(vec,polygons)
}
vec_areas = sapply(vec, st_area)
subset = vec[vec_areas > lowerbound]
sem$area_sf = st_area(sem$geometry)
areas=sem$area_sf
const = median(sem$areaSqM/sem$area_sf)
lowerbound*const
sum(vec_areas[vec_areas > lowerbound ])*const
ggplot() + geom_sf(data = sem$geometry,colour=NA,fill='green')  +
geom_sf(data = st_sfc(subset),colour=NA,fill='red')
lowerq = quantile(vec_areas)[2]
upperq = quantile(vec_areas)[4]
iqr = upperq - lowerq
lowerbound = quantile(vec_areas,probs = 0.39)
vec = vector()
for(i in 1:length(area_intersections_per_id)){
area_intersections_for_id = unname(area_intersections_per_id[[i]])
polygons=vector()
if(length(area_intersections_for_id) == 0){next}
for(j in 1:length(area_intersections_for_id)){
polygons[j] = area_intersections_for_id[[j]]
}
vec=c(vec,polygons)
}
vec_areas = sapply(vec, st_area)
lowerbound = quantile(vec_areas,probs = 0.39)
subset = vec[vec_areas > lowerbound]
sem$area_sf = st_area(sem$geometry)
areas=sem$area_sf
const = median(sem$areaSqM/sem$area_sf)
lowerbound*const
sum(vec_areas[vec_areas > lowerbound ])*const
ggplot() + geom_sf(data = sem$geometry,colour=NA,fill='green')  +
geom_sf(data = st_sfc(subset),colour=NA,fill='red')
ggplot() + geom_sf(data = sem$geometry,colour=NA,fill='green')  +
geom_sf(data = st_sfc(subset),colour=NA,fill='red') + theme_minimal()
plot(sem)
ggplot() + geom_sf(data=sem)
head(sem)
head(sem)
library(tidyverse)
setwd("~/repos/fa084-2019-1S/14_toolbox")
list.files('')
list.files('./')
list.files()
list.files('data/')
list.files('data/continentes/')
list.files('data/continentes/')
list.files('data/continentes/',pattern = 'csv')
getwd()
list.files('data/continentes/',pattern = 'csv',full.names = T)
list.files('data/continentes/',pattern = 'csv',full.names = T)
arquivos_full = list.files('data/continentes/',pattern = 'csv',full.names = T)
lista_arquivos = lapply(arquivos_full, read_csv)
lista[[1]]
lista_arquivos[[1]]
lapply(lista_arquivos, dim)
dim(lista_arquivos[[1]])
x = lista_arquivos[[1]]
dims = dim(x)
print(paste0('Esse dataframe tem ',dims[1], ' e ', dims[2], 'colunas.'))
print(paste0('Esse dataframe tem ',dims[1], ' e ', dims[2], ' colunas.'))
lapply(lista_arquivos, print_dims)
print_dims = function(x){
dims = dim(x)
print(paste0('Esse dataframe tem ',dims[1], ' e ', dims[2], ' colunas.'))
}
lapply(lista_arquivos, print_dims)
lapply(lista_arquivos, function(x) x %>% filter(year == 2007))
names(lista_arquivos)
arquivos_full
basename(arquivos_full)
str_replace(basename(arquivos_full),'.csv','0')
str_replace(basename(arquivos_full),'.csv','')
str_replace(basename(arquivos_full),'.csv','               ')
str_replace(basename(arquivos_full),'.csv','')
nomes_lista = str_replace(basename(arquivos_full),'.csv','')
names(lista_arquivos)
names(lista_arquivos) = nomes_lista
names(lista_arquivos)
lista_arquivos[['oceani']]
lista_arquivos[['oceania']]
lapply(lista_arquivos, colnames)
lapply(lista_arquivos, colnames) %>% unlist()
lapply(lista_arquivos, colnames) %>% unlist() %>% unique()
bind_rows(lista_arquivos)
bind_rows(lista_arquivos,.id = 'continent')
bind_rows(lista_arquivos,.id = 'continente')
df =bind_rows(lista_arquivos,.id = 'continente')
dim(df)
head(df)
#tamanho string
str_length(c('a'))
#tamanho string
str_length(c('a','R for data science'))
#tamanho string
str_length(c('a','R for data science',NA))
#tamanho string
str_length(c('a','R for data science',NA,string1))
string1 = 'This is sparta'
string2 = 'Strings can have "quotes" as long as they are different'
#tamanho string
str_length(c('a','R for data science',NA,string1))
#tamanho string
str_length(c('a','R for data science',NA,string1,string2))
#subset de strings
str_sub(string1,1,4)
str_sub(string1,-6,-1)
#combinacao de strings
str_c('a','b','c')
#combinacao de strings
str_c('a','b','c',sep=' * ')
str_to_lower(string2)
str_to_upper(string2)
str_to_title(string2)
colnames(df)
cols = colnames(df)
cols
dput(cols)
strings = c("continente", "country", "year", "lifeExp", "pop", "gdpPercap")
dput(cols)
dput(cols)
str_detect(strings,"nt")
str_subset(strings,"nt")
strings
str_detect(strings,"nt")
str_subset(strings,"nt")
strings
str_detect(strings,"nt")
str_subset(strings,"nt")
str_subset(strings,"E")
str_subset(x, "ac+b")
#regular expressions - regex
x = c("a", "ab", "acb", "accb", "acccb", "accccb")
str_subset(x, "ac+b")
#regular expressions - regex
x = c("a", "ab", "acb", "accb", "acccb", "accccb","acccccccd")
str_subset(x, "ac+b")
str_subset(x, "ac+")
str_subset(x, "ac+b")
str_subset(x,'ac?b')
str_subset(x,'a?b')
str_subset(x,'ac?b')
str_subset(x, 'a*b')
"
salfdjlsajfdlsajf
sjdlfjsafdljsaf
"
str_subset(x,'ac{2}b')
str_subset(x,'ac{3}b')
str_subset(x,'ac{4}b')
str_subset(x,'ac{5}b')
months
month
montrs
months
letters
Month
month.name
x = month.name
str_sort(x)
#match do comeÃ§o da string
str_subset(x.'^J')
#match do comeÃ§o da string
str_subset(x,'^J')
#pelo fim do string
str_subset(x,'$er')
#pelo fim do string
str_subset(x,'er$')
str_subset(x, "[J|M]")
str_subset(x, "^[J|M]")
str_subset(str_to_lower(x), "[J|M]")
str_subset(str_to_lower(x), "[j|m]")
str_subset(str_to_lower(x), "^[j|m]")
str_detect(x, "XX")
x = "1888 is the longest year in Roman numerals: MDCCCLXXXVIII, it's longer than 2000 which is MM"
str_detect(x, "XX")
str_subset(x, "XX")
str_subset(x, "XX?")
str_extract(x, "XX?")
str_extract(x, "XX+")
str_extract(x, "C+")
str_extract(x, "CC+")
str_extract(x, '8+')
str_extract(x, '1+')
str_extract(x, '0+')
str_extract(x, '8+')
str_extract(x, '0+')
str_extract(x, '1+')
str_extract(x, "[0-9]")
str_extract(x, "[0-9]+")
str_extract_all(x, "[0-9]+")
str_extract_all(c(x,x), "[0-9]+")
y = x
dput(x)
y = "3 is the longest year in Roman numerals: MDCCCLXXXVIII, it's longer than 3454353 which is MM"
y = "3 is the longest year in Roman numerals: 343242342 MDCCCLXXXVIII, it's longer than 3454353 which is MM"
str_extract_all(c(x,y), "[0-9]+")
str_extract_all(c(x,y), "[0-9]+",simplify = T)
str_extract_all(x,"[A-Z]")
str_extract_all(x,"[A-Z]+")
str_extract_all(x,"[A-B]+")
str_extract_all(x,"[A-M]+")
str_extract_all(x,"[a-z]+")
#Extraia os DDDs dos telefones abaixo:
tels = c('     19 999 888 777', '16 777 888 666', '11 989 898 889')
#Extraia os DDDs dos telefones abaixo:
tels = c('19 999 888 777', '16 777 888 666', '11 989 898 889')
str_extract(tels,'[0-9]{2}')
#Extraia os DDDs dos telefones abaixo:
tels = c('    19 999 888 777', '16 777 888 666', '11 989 898 889')
str_extract(tels,'[0-9]{2}')
str_extract(tels,'[0-9]{3}')
#transforme os numeros em ligacoes a cobrar
str_c('9090',tels)
#transforme os numeros em ligacoes a cobrar
str_c('915 ',tels)
#transforme os numeros em ligacoes a cobrar
str_c('9015 ',tels)
#transforme os numeros em ligacoes a cobrar
str_c('90XX ',tels)
#Extraia os DDDs dos telefones abaixo:
tels = c('19 999 888 777', '16 777 888 666', '11 989 898 889')
#transforme os numeros em ligacoes a cobrar
str_c('90XX ',tels)
sentences
str_subset(sentences,'green|blue')
colors <- c("red", "orange", "yellow", "green", "blue", "purple")
str_c(colors,sep='|')
str_c(colors,sep='')
str_c(colors,sep='|')
str_c(colors,collapse = ='|')
str_c(colors,collapse ='|')
match = str_c(colors,collapse ='|')
str_subset(sentences,match)
colors_matched = str_subset(sentences,match)
str_extract(colors_matched, colors)
colors_matched = str_subset(sentences,match)
str_extract_all(colors_matched, colors)
colors_matched = str_subset(sentences,match)
colors_matched
colors
str_extract(colors_matched, match)
